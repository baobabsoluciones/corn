"""
Model for the executions
"""

# Import from libraries
import hashlib

# Imports from sqlalchemy
from sqlalchemy.dialects.postgresql import JSON
from sqlalchemy.dialects.postgresql import TEXT
from sqlalchemy.sql import expression

# Imports from internal modules
from .meta_model import BaseAttributes
from ..models.instance import InstanceModel
from ..shared.utils import db


class ExecutionModel(BaseAttributes):
    """
    Model class for the Executions.
    It inherits from :class:`BaseAttributes` to have the trace fields and user field

    The :class:`ExecutionModel` has the following fields:

    - **id**: int, the primary key for the executions, it is also referred as the internal ID.
      It is an auto increment field.
    - **instance_id**: int, the foreign key for the instance (:class:`InstanceModel`). It links the execution to its
      parent instance.
    - **config**: dict (JSON), the configuration to be used in the execution (:class:`ConfigSchema`).
    - **reference_id**: str, a hash generated upon creation of the execution and the id given back to the user.
      The hash is generated from the creation date, the user and the id of the parent instance.
      This field is unique for each execution.
    - **execution_results**: dict (JSON), the results from the execution (:class:`DataSchema`).
    - **log_text**: text, the log generated by the airflow webserver during execution. This log is stored as text.
    - **log_json**: dict (JSON), the log generated by the airflow webserver during execution.
      This log is stored as a dict (JSON).
    - **finished**: bool, if the execution has finished executing in the airflow webserver.
    - **user_id**: int, the foreign key for the user (:class:`UserModel`). It links the execution to its owner.
    - **created_at**: datetime, the datetime when the execution was created (in UTC).
      This datetime is generated automatically, the user does not need to provide it.
    - **updated_at**: datetime, the datetime when the execution was last updated (in UTC).
      This datetime is generated automatically, the user does not need to provide it.
    - **deleted_at**: datetime, the datetime when the execution was deleted (in UTC). Even though it is deleted,
      actually, it is not deleted from the database, in order to have a command that cleans up deleted data
      after a certain time of its deletion.
      This datetime is generated automatically, the user does not need to provide it.

    :param dict data: the parsed json got from an endpoint that contains all the required information to
    create a new execution
    """

    # Table name in the database
    __tablename__ = 'executions'

    # Model fields
    id = db.Column(db.Integer, primary_key=True)
    instance_id = db.Column(db.Integer, db.ForeignKey('instances.id'), nullable=False)
    config = db.Column(JSON, nullable=False)
    reference_id = db.Column(db.String(256), nullable=False, unique=True)
    execution_results = db.Column(JSON, nullable=True)
    log_text = db.Column(TEXT, nullable=True)
    log_json = db.Column(JSON, nullable=True)
    finished = db.Column(db.Boolean, server_default=expression.false(), default=False, nullable=False)

    def __init__(self, data):
        """
        Constructor method

        :param dict data: A dictionary containing the data for the execution
        """
        super().__init__(data)
        self.user_id = data.get('user_id')
        self.instance_id = data.get('instance_id')
        self.finished = False
        self.config = data.get('config')
        # TODO: check if reference id for the instance can be modified to either be smaller or have a prefix
        #  that identifies it as an execution
        self.reference_id = hashlib.sha1(
            (str(self.created_at) + ' ' + str(self.user_id) + ' ' + str(self.instance_id)).encode()).hexdigest()

    def save(self):
        """
        Saves the execution to the database

        :return:
        :rtype:
        """
        # TODO: check if we can implement any kind of rollback if needed
        db.session.add(self)
        db.session.commit()

    def update(self, data):
        """
        Updates the execution in the data base and automatically updates the modified_at field

        :param dict data:  A dictionary containing the data for the execution
        :return:
        :rtype:
        """
        for key, item in data.items():
            setattr(self, key, item)
        super().update(data)

    def disable(self):
        """
        Updates the deleted_at field of an execution to mark an execution as "deleted"

        :return:
        :rtype:
        """
        super().disable()

    def delete(self):
        """
        Deletes an execution permanently from the database

        :return:
        :rtype:
        """
        db.session.delete(self)
        db.session.commit()

    @staticmethod
    def get_all_executions_user(user):
        """
        Gets all executions from one user

        :param int user: User ID.
        :return: the executions of the user.
        :rtype:
        """
        return ExecutionModel.query.filter_by(user_id=user, deleted_at=None)

    @staticmethod
    def get_execution_with_id(execution_id):
        """
        Gets one execution with the given id (internal ID)

        :param int execution_id: Execution internal ID
        :return: The execution
        :rtype:
        """
        return ExecutionModel.query.get(execution_id, deleted_at=None)

    @staticmethod
    def get_execution_with_reference(reference_id):
        """
        Gets one execution with the given reference_id (external ID)

        :param str reference_id: Execution reference id.
        :return: The execution
        :rtype:
        """
        return ExecutionModel.query.filter_by(reference_id=reference_id, deleted_at=None).first()

    @staticmethod
    def get_execution_id(reference_id):
        """
        Gets the id (internal) of the execution from its reference_id (external)

        :param str reference_id:
        :return: the id of the execution
        :rtype: int
        """
        return ExecutionModel.query.filter_by(reference_id=reference_id, deleted_at=None).first().id
    
    @staticmethod
    def get_execution_data(reference_id):
        """
        Gets the configuration of the execution and the data for the execution from its parent instance
        from a given reference_id

        :param str reference_id: The reference ID of the execution.
        :return: a dict with the data from the parent instance (:class:`InstanceModel`)
        and the configuration from the execution
        :rtype: dict
        """
        execution = ExecutionModel.get_execution_with_reference(reference_id)
        instance_data = InstanceModel.get_one_instance_from_id(execution.instance_id).data
        config = execution.config
        return {"data": instance_data, "config": config}
        
    def __repr__(self):
        """
        Representation method

        :return: the representation of the execution as string
        :rtype: str
        """
        return '<id {}>'.format(self.id)
